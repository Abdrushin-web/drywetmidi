trigger:
  batch: true
  branches:
    include:
    - master
    - develop
  paths:
    include:
    - 'DryWetMidi/*'
    - 'DryWetMidi.Tests/*'
    - 'DryWetMidi.Tests.Common/*'
    - 'Resources/CI/test-core.yaml'
    - 'Resources/CI/Templates/stage-build-native-libs.yaml'
    - 'Resources/CI/Templates/step-copy-native-libraries-near-csproj.yaml'
    - 'Resources/CI/Templates/step-collect-logs.yaml'
    - 'Resources/CI/Templates/step-setup-framework-variables.yaml'
    exclude:
    - 'DryWetMidi/Devices/*'
    - 'DryWetMidi.Tests/Devices/*'

pr:
  branches:
    include:
    - develop
  paths:
    include:
    - 'DryWetMidi/*'
    - 'DryWetMidi.Tests/*'
    - 'DryWetMidi.Tests.Common/*'
    - 'Resources/CI/test-core.yaml'
    - 'Resources/CI/Templates/stage-build-native-libs.yaml'
    - 'Resources/CI/Templates/step-copy-native-libraries-near-csproj.yaml'
    - 'Resources/CI/Templates/step-collect-logs.yaml'
    - 'Resources/CI/Templates/step-setup-framework-variables.yaml'
    exclude:
    - 'DryWetMidi/Multimedia/*'
    - 'DryWetMidi.Tests/Multimedia/*'

variables:
- group: DryWetMIDI-Common-Variables

name: TestCore_$(Framework)_$(LibraryVersion)$(Rev:.r)

stages:
- template: Templates/stage-build-native-libs.yaml
    
- stage: RunTests
  displayName: Run tests
  pool:
    vmImage: '$(VmImage)'
  jobs:
  - job: RunTests
    displayName: Run tests
    steps:
    - template: Templates/step-copy-native-libraries-near-csproj.yaml
    
    - template: Templates/step-setup-framework-variables.yaml
      parameters:
        framework: '$(Framework)'
    
    - task: UseDotNet@2
      displayName: 'Use required framework'
      condition: not(eq(variables.Framework, 'NetFramework'))
      inputs:
        packageType: sdk
        version: '$(SdkVersion)'
        installationPath: $(Agent.ToolsDirectory)/dotnet
    
    - task: DotNetCoreCLI@2
      displayName: Run unit tests (Windows)
      condition: not(eq(variables.VmImage, 'macos-latest'))
      inputs:
        command: 'test'
        projects: 'DryWetMidi.Tests/Melanchall.DryWetMidi.Tests.csproj'
        arguments: '--blame --configuration $(TestBuildConfiguration) --filter (FullyQualifiedName~Melanchall.DryWetMidi.Tests.Core|FullyQualifiedName~Melanchall.DryWetMidi.Tests.Common|FullyQualifiedName~Melanchall.DryWetMidi.Tests.Composing|FullyQualifiedName~Melanchall.DryWetMidi.Tests.Interaction|FullyQualifiedName~Melanchall.DryWetMidi.Tests.MusicTheory|FullyQualifiedName~Melanchall.DryWetMidi.Tests.Standards|FullyQualifiedName~Melanchall.DryWetMidi.Tests.Tools) --framework $(Tfm) --verbosity normal -d diagnostic.log'
        
    - task: DotNetCoreCLI@2
      displayName: Run unit tests (non-Windows)
      condition: eq(variables.VmImage, 'macos-latest')
      inputs:
        command: 'test'
        projects: 'DryWetMidi.Tests/Melanchall.DryWetMidi.Tests.csproj'
        arguments: '--blame --configuration $(TestBuildConfiguration) --filter ((FullyQualifiedName~Melanchall.DryWetMidi.Tests.Core|FullyQualifiedName~Melanchall.DryWetMidi.Tests.Common|FullyQualifiedName~Melanchall.DryWetMidi.Tests.Composing|FullyQualifiedName~Melanchall.DryWetMidi.Tests.Interaction|FullyQualifiedName~Melanchall.DryWetMidi.Tests.MusicTheory|FullyQualifiedName~Melanchall.DryWetMidi.Tests.Standards|FullyQualifiedName~Melanchall.DryWetMidi.Tests.Tools)&Name!=CheckValidFilesReadingByReferences) --framework $(Tfm) --verbosity normal -d diagnostic.log'
        
    - task: PowerShell@2
      displayName: Collect diagnostic reports
      condition: and(failed(), eq(variables.VmImage, 'macos-latest'))
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Checking if diagnostic reports created..."
          Start-Sleep -s 10
          
          $path = "$HOME/Library/Logs/DiagnosticReports"
          
          if (Test-Path -Path "$path")
          {
            Write-Host "There are diagnostic reports, copying..."
            Copy-Item -Path "$path" -Destination "$(Pipeline.Workspace)" -Recurse
            Write-Host "##vso[task.setvariable variable=DiagnosticReportsFound]true"
          }
          else
          {
            Write-Host "There are no diagnostic reports found."
            Write-Host "##vso[task.setvariable variable=DiagnosticReportsFound]false"
          }
          
    - task: PublishPipelineArtifact@1
      displayName: Publish 'DiagnosticReports' artifact
      condition: eq(variables['DiagnosticReportsFound'], true)
      inputs:
        targetPath: '$(Pipeline.Workspace)/DiagnosticReports'
        artifactName: 'DiagnosticReports'
        artifactType: pipeline
        
    - template: Templates/step-collect-logs.yaml
